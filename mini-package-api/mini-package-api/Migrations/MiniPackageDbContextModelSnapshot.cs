// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using mini_package_api.DbContexts;

#nullable disable

namespace mini_package_api.Migrations
{
    [DbContext(typeof(MiniPackageDbContext))]
    partial class MiniPackageDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("mini_package_api.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("address_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("city");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("country_id");

                    b.Property<int?>("FlatNumber")
                        .HasColumnType("int")
                        .HasColumnName("flat_number");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("street");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("street_number");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("zip_code");

                    b.HasKey("AddressId");

                    b.HasIndex("CountryId");

                    b.ToTable("Addresss", (string)null);

                    b.HasData(
                        new
                        {
                            AddressId = 1,
                            City = "Warsaw",
                            CountryId = 1,
                            FlatNumber = 10,
                            Street = "Nowowiejska",
                            StreetNumber = "17",
                            ZipCode = "12-345"
                        },
                        new
                        {
                            AddressId = 2,
                            City = "Krakow",
                            CountryId = 1,
                            Street = "Kwiatkowa",
                            StreetNumber = "5a",
                            ZipCode = "543-21"
                        },
                        new
                        {
                            AddressId = 3,
                            City = "Paris",
                            CountryId = 2,
                            FlatNumber = 3,
                            Street = "France street 1",
                            StreetNumber = "2",
                            ZipCode = "52006"
                        },
                        new
                        {
                            AddressId = 4,
                            City = "Lyon",
                            CountryId = 2,
                            Street = "France street 2",
                            StreetNumber = "5a",
                            ZipCode = "78264"
                        },
                        new
                        {
                            AddressId = 5,
                            City = "Berlin",
                            CountryId = 3,
                            FlatNumber = 3,
                            Street = "Germany street 1",
                            StreetNumber = "2",
                            ZipCode = "10117"
                        },
                        new
                        {
                            AddressId = 6,
                            City = "Madrid",
                            CountryId = 4,
                            Street = "Spain street 1",
                            StreetNumber = "3",
                            ZipCode = "28012"
                        });
                });

            modelBuilder.Entity("mini_package_api.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_name");

                    b.Property<bool>("Newsletter")
                        .HasColumnType("bit")
                        .HasColumnName("newsletter");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("salt");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("Clients", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "",
                            FirstName = "",
                            LastName = "",
                            Newsletter = false,
                            Password = "",
                            Salt = new byte[0],
                            Username = ""
                        },
                        new
                        {
                            Id = 2,
                            Email = "mikwa@gmail.com",
                            FirstName = "Michal",
                            LastName = "Kwiatek",
                            Newsletter = false,
                            Password = "97753C644111E63F9346D47545EEE25D13E069F8174B8C1EA416DB8D27307AF8015E7DCA3F0D69E6AD3D3BCAA97241E999F030A99E6ACDF62D4578615D7430F4",
                            Salt = new byte[] { 244, 93, 9, 121, 127, 26, 238, 66, 6, 16, 185, 21, 173, 212, 131, 243, 236, 218, 15, 59, 11, 122, 144, 3, 171, 80, 138, 216, 115, 225, 103, 28, 240, 238, 66, 236, 251, 163, 251, 205, 103, 67, 255, 80, 165, 147, 194, 221, 198, 59, 67, 173, 155, 103, 55, 87, 73, 115, 137, 51, 39, 142, 177, 172 },
                            Username = "mikwa"
                        },
                        new
                        {
                            Id = 3,
                            Email = "kakow@gmail.com",
                            FirstName = "Kacper",
                            LastName = "Kowalski",
                            Newsletter = false,
                            Password = "EF2D9AF8E17C8EDD457A24CA6F2339FE889302A91586F1F477640D15B8C7B343C4481287D1978828593226FCA8B89EF86FF344FC58E7689C9CD0ED26C4880D83",
                            Salt = new byte[] { 142, 109, 203, 117, 107, 186, 25, 239, 47, 12, 208, 98, 199, 4, 17, 77, 21, 226, 226, 107, 70, 16, 116, 91, 27, 252, 20, 137, 217, 50, 0, 41, 220, 100, 25, 94, 237, 132, 46, 76, 62, 216, 96, 155, 172, 162, 22, 159, 129, 14, 197, 131, 155, 148, 36, 240, 127, 239, 252, 188, 54, 227, 130, 180 },
                            Username = "kakow"
                        },
                        new
                        {
                            Id = 4,
                            Email = "mateuszlipek@gmail.com",
                            FirstName = "Mateusz",
                            LastName = "Lipek",
                            Newsletter = false,
                            Password = "291FFD0DD8437241DB9A2ECA2EE9EB089A4B057838A87178FCEDA6DEA080A9F684A212B4C8DA5B94BA0254D8E248B2C4356D728E51031C3503DEDE9E055F71C0",
                            Salt = new byte[] { 113, 137, 219, 251, 10, 81, 251, 240, 85, 165, 225, 68, 92, 78, 121, 89, 214, 185, 60, 170, 46, 152, 112, 105, 50, 221, 197, 11, 169, 3, 127, 89, 181, 227, 239, 23, 163, 110, 111, 99, 84, 237, 97, 38, 128, 141, 25, 124, 97, 161, 98, 133, 202, 228, 56, 138, 113, 197, 239, 50, 105, 190, 209, 29 },
                            Username = "lipek"
                        },
                        new
                        {
                            Id = 7,
                            Email = "testminipackage@gmail.com",
                            FirstName = "Test",
                            LastName = "Test",
                            Newsletter = false,
                            Password = "6CFEF2BB30749BBD4EEA4ED902EB88B9994EF43BA54E23DBF7147F09950EDD5413EE7D3797877530D39A73E031152D3D6DA515909A64BF070CF16BB108A0617F",
                            Salt = new byte[] { 228, 17, 126, 12, 198, 129, 68, 129, 54, 26, 100, 86, 253, 106, 254, 19, 42, 80, 206, 223, 237, 207, 84, 237, 205, 93, 253, 197, 47, 184, 90, 152, 250, 248, 234, 158, 169, 7, 170, 42, 222, 8, 8, 134, 54, 55, 133, 185, 5, 46, 216, 200, 19, 12, 148, 107, 40, 142, 13, 45, 94, 57, 10, 39 },
                            Username = "test"
                        });
                });

            modelBuilder.Entity("mini_package_api.Models.ClientAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("address_id");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit")
                        .HasColumnName("is_default");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientAddresses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            ClientId = 2,
                            IsDefault = true
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            ClientId = 2,
                            IsDefault = false
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 3,
                            ClientId = 2,
                            IsDefault = false
                        },
                        new
                        {
                            Id = 4,
                            AddressId = 4,
                            ClientId = 3,
                            IsDefault = true
                        },
                        new
                        {
                            Id = 5,
                            AddressId = 5,
                            ClientId = 3,
                            IsDefault = false
                        },
                        new
                        {
                            Id = 6,
                            AddressId = 6,
                            ClientId = 3,
                            IsDefault = false
                        });
                });

            modelBuilder.Entity("mini_package_api.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("country_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("country_code");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("country_name");

                    b.HasKey("CountryId");

                    b.ToTable("Countries", (string)null);

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            CountryCode = "PL",
                            CountryName = "Poland"
                        },
                        new
                        {
                            CountryId = 2,
                            CountryCode = "FR",
                            CountryName = "France"
                        },
                        new
                        {
                            CountryId = 3,
                            CountryCode = "DE",
                            CountryName = "Germany"
                        },
                        new
                        {
                            CountryId = 4,
                            CountryCode = "ES",
                            CountryName = "Spain"
                        });
                });

            modelBuilder.Entity("mini_package_api.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("role");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("salt");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("Employees", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "janow@gmail.com",
                            FirstName = "Jan",
                            LastName = "Nowak",
                            Password = "A19C1AF443415358A92BD7C702AA03477BF563C4878CFE3550B002B5CFBD2FFD3B7AA83EE5B8C4DF6707208063CDC5CE67515F3F0534BDF807DA1FC4A7B31A06",
                            Role = "OfficeWorker",
                            Salt = new byte[] { 72, 206, 16, 189, 73, 166, 183, 200, 193, 220, 211, 92, 193, 97, 227, 124, 82, 20, 220, 117, 57, 153, 222, 135, 151, 156, 175, 183, 34, 15, 27, 161, 44, 16, 64, 114, 32, 150, 186, 58, 53, 4, 2, 87, 179, 29, 123, 187, 51, 42, 115, 127, 142, 47, 161, 32, 242, 229, 216, 219, 182, 107, 247, 126 },
                            Username = "janow"
                        },
                        new
                        {
                            Id = 2,
                            Email = "frwys@gmail.com",
                            FirstName = "Franek",
                            LastName = "Wyszomierski",
                            Password = "9C423191F70F1B8A4A9404C4A9748A7A1D392E6BA2A14943B4A68D3AA5989A74D2F1BAA08E814A7A792493C2C9330991487F41B535AF0A6C6A4CB6C060F37635",
                            Role = "Courier",
                            Salt = new byte[] { 78, 2, 200, 92, 86, 246, 137, 160, 70, 185, 36, 23, 211, 34, 95, 182, 13, 18, 99, 248, 8, 153, 175, 59, 26, 35, 38, 29, 149, 38, 226, 128, 16, 178, 199, 135, 255, 43, 36, 126, 237, 28, 220, 114, 81, 158, 65, 26, 189, 56, 227, 17, 173, 171, 113, 195, 120, 158, 168, 125, 203, 171, 168, 234 },
                            Username = "frwys"
                        },
                        new
                        {
                            Id = 3,
                            Email = "igzal@gmail.com",
                            FirstName = "Ignacy",
                            LastName = "Zalewski",
                            Password = "C1169E87CF158E021E6CECBF46D91FAB2306BD34E33B6056EE96DE36F5CDF57FD81E5E74599AF8019D356CF1D74A60934BEA2A320318D3D58ADD98298295E539",
                            Role = "Courier",
                            Salt = new byte[] { 17, 150, 93, 53, 43, 159, 191, 88, 57, 152, 232, 8, 222, 251, 166, 81, 26, 205, 2, 185, 26, 157, 70, 27, 67, 87, 15, 67, 187, 128, 147, 59, 239, 121, 187, 209, 150, 217, 47, 76, 68, 59, 112, 25, 241, 22, 115, 46, 161, 41, 182, 124, 233, 176, 199, 62, 165, 225, 44, 39, 51, 44, 251, 125 },
                            Username = "igzal"
                        });
                });

            modelBuilder.Entity("mini_package_api.Models.Inquire", b =>
                {
                    b.Property<int>("InquireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("inquire_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InquireId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<bool>("DeliveryAtWeekend")
                        .HasColumnType("bit")
                        .HasColumnName("delivery_at_weekend");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("delivery_date");

                    b.Property<int>("DestinationClientAddressId")
                        .HasColumnType("int")
                        .HasColumnName("destination_client_address_id");

                    b.Property<decimal>("DisplayPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("display_price");

                    b.Property<Guid>("InquireGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("inqure_guid");

                    b.Property<bool>("IsIncoming")
                        .HasColumnType("bit")
                        .HasColumnName("is_incoming");

                    b.Property<decimal>("PackageSizeHeight")
                        .HasColumnType("decimal(6,2)")
                        .HasColumnName("package_size_height");

                    b.Property<decimal>("PackageSizeLength")
                        .HasColumnType("decimal(6,2)")
                        .HasColumnName("package_size_length");

                    b.Property<decimal>("PackageSizeWidth")
                        .HasColumnType("decimal(6,2)")
                        .HasColumnName("package_size_width");

                    b.Property<DateTime>("PickupDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("pickup_date");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("priority");

                    b.Property<int>("SourceClientAddressId")
                        .HasColumnType("int")
                        .HasColumnName("source_client_address_id");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(6,3)")
                        .HasColumnName("weight");

                    b.HasKey("InquireId");

                    b.HasIndex("DestinationClientAddressId");

                    b.HasIndex("SourceClientAddressId");

                    b.ToTable("Inquires", (string)null);

                    b.HasData(
                        new
                        {
                            InquireId = 1,
                            CreatedDate = new DateTime(2023, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 1,
                            DisplayPrice = 250m,
                            InquireGuid = new Guid("7c6d1c48-2f41-4df2-8165-4c3e13c3c20b"),
                            IsIncoming = false,
                            PackageSizeHeight = 7.75m,
                            PackageSizeLength = 3m,
                            PackageSizeWidth = 10.5m,
                            PickupDate = new DateTime(2023, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 2,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 2,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = true,
                            DeliveryDate = new DateTime(2023, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 1,
                            DisplayPrice = 150m,
                            InquireGuid = new Guid("0f13dceb-bd36-4f3a-8752-1e5fe72e5d9f"),
                            IsIncoming = false,
                            PackageSizeHeight = 5.25m,
                            PackageSizeLength = 2m,
                            PackageSizeWidth = 2.5m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "High",
                            SourceClientAddressId = 3,
                            Weight = 2m
                        },
                        new
                        {
                            InquireId = 3,
                            CreatedDate = new DateTime(2023, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 4,
                            DisplayPrice = 510m,
                            InquireGuid = new Guid("dce66f68-d07b-420e-a75a-7a67af189c15"),
                            IsIncoming = false,
                            PackageSizeHeight = 6.30m,
                            PackageSizeLength = 3.6m,
                            PackageSizeWidth = 12.35m,
                            PickupDate = new DateTime(2023, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 5,
                            Weight = 0.75m
                        },
                        new
                        {
                            InquireId = 4,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = true,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 4,
                            DisplayPrice = 123m,
                            InquireGuid = new Guid("c1980f39-9f0a-40e4-8e4d-3bf2416957b7"),
                            IsIncoming = false,
                            PackageSizeHeight = 4m,
                            PackageSizeLength = 1.5m,
                            PackageSizeWidth = 3m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "High",
                            SourceClientAddressId = 6,
                            Weight = 12m
                        },
                        new
                        {
                            InquireId = 5,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = true,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 322m,
                            InquireGuid = new Guid("c7f1b0e4-b9d1-49f4-8cc0-c8ed458ec4b9"),
                            IsIncoming = false,
                            PackageSizeHeight = 2m,
                            PackageSizeLength = 1.5m,
                            PackageSizeWidth = 13m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "High",
                            SourceClientAddressId = 8,
                            Weight = 22m
                        },
                        new
                        {
                            InquireId = 6,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 550m,
                            InquireGuid = new Guid("7c03436c-82bf-4b4b-bf03-3a60e3d8e8f9"),
                            IsIncoming = false,
                            PackageSizeHeight = 4m,
                            PackageSizeLength = 4.75m,
                            PackageSizeWidth = 5m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 9,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 7,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = true,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 8,
                            DisplayPrice = 610m,
                            InquireGuid = new Guid("312888d1-2e1f-4ea1-9dbb-ee42f94ed8b5"),
                            IsIncoming = false,
                            PackageSizeHeight = 3.5m,
                            PackageSizeLength = 3m,
                            PackageSizeWidth = 6.5m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 9,
                            Weight = 10m
                        },
                        new
                        {
                            InquireId = 8,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 9,
                            DisplayPrice = 997m,
                            InquireGuid = new Guid("12cf5d36-e146-4e61-badf-d40f8e9e4f6d"),
                            IsIncoming = false,
                            PackageSizeHeight = 12m,
                            PackageSizeLength = 2.5m,
                            PackageSizeWidth = 1.25m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "High",
                            SourceClientAddressId = 8,
                            Weight = 13m
                        },
                        new
                        {
                            InquireId = 9,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 308m,
                            InquireGuid = new Guid("8a3ef693-dbc1-4efb-a7c1-9722d6b09e0a"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 10,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 309m,
                            InquireGuid = new Guid("ed3e30ec-bb44-4679-b007-70bf7b33177c"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 11,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 310m,
                            InquireGuid = new Guid("779cc5e5-c3c4-4d0a-b349-3a1f27e5fb65"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 12,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 311m,
                            InquireGuid = new Guid("fe1e0c4c-431c-4c8c-aa7c-3e6e31a62d8a"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 13,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 312m,
                            InquireGuid = new Guid("93a03c65-c6b8-480b-a397-58bc1864295c"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 14,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 313m,
                            InquireGuid = new Guid("c595b06d-9997-4c6a-b0d5-4d43f78913e3"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 15,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 314m,
                            InquireGuid = new Guid("bc77e81f-1fe9-4a8a-9149-11531c7cc9c6"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 16,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 315m,
                            InquireGuid = new Guid("c1361091-ba2a-42fc-a34f-0a57912b20d3"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 17,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 316m,
                            InquireGuid = new Guid("e74a6a5c-f631-416b-9a1c-25eb856c9eae"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 18,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 317m,
                            InquireGuid = new Guid("8894a5fc-b2bf-4cf2-a292-144692c1190a"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 19,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 318m,
                            InquireGuid = new Guid("d3c583b8-efcb-4b38-bc0f-2e66ff489c77"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 20,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 319m,
                            InquireGuid = new Guid("be923f96-3c9d-4ae5-90a2-6ddbe94c2dc4"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 21,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 320m,
                            InquireGuid = new Guid("af1f3ff5-9e2e-4ed4-bc09-e510c280194b"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 22,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 321m,
                            InquireGuid = new Guid("f1f72911-83e7-4a3d-a3b1-cbc515af682f"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 23,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 322m,
                            InquireGuid = new Guid("fc051f0c-400f-40ef-8cb6-9923d9960f98"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 24,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 323m,
                            InquireGuid = new Guid("0db947eb-c6eb-4273-b783-47eac68a164d"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 25,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 324m,
                            InquireGuid = new Guid("bc3e7ae3-04b9-4e47-bb0b-541c4df36d3e"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 26,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 325m,
                            InquireGuid = new Guid("0c67dcb3-2f67-4b19-bfe2-015081c1c94a"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 27,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 326m,
                            InquireGuid = new Guid("3da3c8ec-2c99-40e3-9a0c-2e4052a849c5"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 28,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 327m,
                            InquireGuid = new Guid("89a9d2f0-fa68-4c4e-84b8-e4e02d8e6473"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 29,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 328m,
                            InquireGuid = new Guid("985f39db-86e2-437d-b50e-e8616b6bf21b"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        });
                });

            modelBuilder.Entity("mini_package_api.Models.Offer", b =>
                {
                    b.Property<int>("OfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("offer_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfferId"));

                    b.Property<int>("CourierId")
                        .HasColumnType("int")
                        .HasColumnName("courier_id");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("global_id")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("InquireId")
                        .HasColumnType("int")
                        .HasColumnName("inquire_id");

                    b.Property<string>("OfferStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("offer_status");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("team_name");

                    b.HasKey("OfferId");

                    b.HasIndex("CourierId");

                    b.HasIndex("InquireId")
                        .IsUnique();

                    b.ToTable("Offers", (string)null);

                    b.HasData(
                        new
                        {
                            OfferId = 1,
                            CourierId = 2,
                            Guid = new Guid("15114657-f81e-4df0-9f0b-a9d285ea120f"),
                            InquireId = 1,
                            OfferStatus = "AtWarehouse",
                            Price = 100m,
                            TeamName = "MiNIPackage"
                        },
                        new
                        {
                            OfferId = 2,
                            CourierId = 3,
                            Guid = new Guid("0e8820db-21b3-4999-b4eb-553aeccbe505"),
                            InquireId = 4,
                            OfferStatus = "OfferStatusEnum",
                            Price = 70.28m,
                            TeamName = "MiNIPackage"
                        });
                });

            modelBuilder.Entity("mini_package_api.Models.Address", b =>
                {
                    b.HasOne("mini_package_api.Models.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("mini_package_api.Models.ClientAddress", b =>
                {
                    b.HasOne("mini_package_api.Models.Address", "Address")
                        .WithMany("ClientAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mini_package_api.Models.Client", "Client")
                        .WithMany("ClientAddresses")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("mini_package_api.Models.Inquire", b =>
                {
                    b.HasOne("mini_package_api.Models.ClientAddress", "DestinationClientAddress")
                        .WithMany("DestinationInquires")
                        .HasForeignKey("DestinationClientAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("mini_package_api.Models.ClientAddress", "SourceClientAddress")
                        .WithMany("SourceInquires")
                        .HasForeignKey("SourceClientAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DestinationClientAddress");

                    b.Navigation("SourceClientAddress");
                });

            modelBuilder.Entity("mini_package_api.Models.Offer", b =>
                {
                    b.HasOne("mini_package_api.Models.Employee", "Courier")
                        .WithMany("Offers")
                        .HasForeignKey("CourierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mini_package_api.Models.Inquire", "Inquire")
                        .WithOne("Offer")
                        .HasForeignKey("mini_package_api.Models.Offer", "InquireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courier");

                    b.Navigation("Inquire");
                });

            modelBuilder.Entity("mini_package_api.Models.Address", b =>
                {
                    b.Navigation("ClientAddresses");
                });

            modelBuilder.Entity("mini_package_api.Models.Client", b =>
                {
                    b.Navigation("ClientAddresses");
                });

            modelBuilder.Entity("mini_package_api.Models.ClientAddress", b =>
                {
                    b.Navigation("DestinationInquires");

                    b.Navigation("SourceInquires");
                });

            modelBuilder.Entity("mini_package_api.Models.Country", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("mini_package_api.Models.Employee", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("mini_package_api.Models.Inquire", b =>
                {
                    b.Navigation("Offer")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
