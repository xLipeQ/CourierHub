// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using mini_package_api.DbContexts;

#nullable disable

namespace mini_package_api.Migrations
{
    [DbContext(typeof(MiniPackageDbContext))]
    [Migration("20240106162915_added again")]
    partial class addedagain
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("mini_package_api.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("address_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("city");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("country_id");

                    b.Property<int?>("FlatNumber")
                        .HasColumnType("int")
                        .HasColumnName("flat_number");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("street");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("street_number");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("zip_code");

                    b.HasKey("AddressId");

                    b.HasIndex("CountryId");

                    b.ToTable("Addresss");

                    b.HasData(
                        new
                        {
                            AddressId = 1,
                            City = "Warsaw",
                            CountryId = 1,
                            FlatNumber = 10,
                            Street = "Nowowiejska",
                            StreetNumber = "17",
                            ZipCode = "12-345"
                        },
                        new
                        {
                            AddressId = 2,
                            City = "Krakow",
                            CountryId = 1,
                            Street = "Kwiatkowa",
                            StreetNumber = "5a",
                            ZipCode = "543-21"
                        },
                        new
                        {
                            AddressId = 3,
                            City = "Paris",
                            CountryId = 2,
                            FlatNumber = 3,
                            Street = "France street 1",
                            StreetNumber = "2",
                            ZipCode = "52006"
                        },
                        new
                        {
                            AddressId = 4,
                            City = "Lyon",
                            CountryId = 2,
                            Street = "France street 2",
                            StreetNumber = "5a",
                            ZipCode = "78264"
                        },
                        new
                        {
                            AddressId = 5,
                            City = "Berlin",
                            CountryId = 3,
                            FlatNumber = 3,
                            Street = "Germany street 1",
                            StreetNumber = "2",
                            ZipCode = "10117"
                        },
                        new
                        {
                            AddressId = 6,
                            City = "Madrid",
                            CountryId = 4,
                            Street = "Spain street 1",
                            StreetNumber = "3",
                            ZipCode = "28012"
                        },
                        new
                        {
                            AddressId = 7,
                            City = "Warsaw",
                            CountryId = 1,
                            Street = "Zlota",
                            StreetNumber = "32",
                            ZipCode = "111-11"
                        },
                        new
                        {
                            AddressId = 8,
                            City = "Krakow",
                            CountryId = 1,
                            FlatNumber = 10,
                            Street = "Raclawicka",
                            StreetNumber = "12",
                            ZipCode = "222-22"
                        },
                        new
                        {
                            AddressId = 9,
                            City = "Paris",
                            CountryId = 2,
                            Street = "Montreuil",
                            StreetNumber = "1",
                            ZipCode = "33333"
                        });
                });

            modelBuilder.Entity("mini_package_api.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_name");

                    b.Property<bool>("Newsletter")
                        .HasColumnType("bit")
                        .HasColumnName("newsletter");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("salt");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "",
                            FirstName = "",
                            LastName = "",
                            Newsletter = false,
                            Password = "",
                            Salt = new byte[0],
                            Username = ""
                        },
                        new
                        {
                            Id = 2,
                            Email = "mikwa@gmail.com",
                            FirstName = "Michal",
                            LastName = "Kwiatek",
                            Newsletter = false,
                            Password = "D1149B2C685CB2171C2D3F2C547FAE6A1159D27B85E0FF036F4C81216B7322985C46C22C57EC32B7864F8903ED037430A4545BBA2B56B021879045DA79F50CA0",
                            Salt = new byte[] { 18, 41, 10, 79, 46, 55, 184, 2, 165, 89, 254, 119, 192, 143, 101, 48, 212, 4, 247, 13, 206, 37, 189, 106, 178, 185, 228, 210, 34, 49, 235, 190, 236, 71, 169, 17, 189, 93, 107, 153, 149, 107, 214, 17, 133, 190, 190, 146, 110, 93, 75, 188, 132, 234, 238, 182, 221, 176, 154, 161, 202, 83, 69, 61 },
                            Username = "mikwa"
                        },
                        new
                        {
                            Id = 3,
                            Email = "kakow@gmail.com",
                            FirstName = "Kacper",
                            LastName = "Kowalski",
                            Newsletter = false,
                            Password = "42E91C32D215191FD8517E7460AD48288E9B5802330CF6F9DA71CD1649DF6EC19D1475C7968DB450F007A9795D9B97CAEB037B5636940EEFCB89353D81B125A1",
                            Salt = new byte[] { 45, 245, 121, 40, 190, 61, 227, 144, 191, 50, 155, 67, 222, 250, 148, 31, 22, 58, 188, 46, 219, 22, 79, 246, 197, 250, 151, 111, 149, 57, 141, 72, 242, 109, 174, 107, 214, 102, 3, 14, 210, 21, 173, 48, 97, 106, 230, 133, 1, 187, 18, 223, 56, 10, 113, 119, 171, 55, 245, 162, 34, 78, 65, 115 },
                            Username = "kakow"
                        },
                        new
                        {
                            Id = 4,
                            Email = "mateuszlipek@gmail.com",
                            FirstName = "Mateusz",
                            LastName = "Lipek",
                            Newsletter = false,
                            Password = "95514E5AF48935D5DCD0750FB3B784C2E38C6021D464211CC94106339FBF0408486D77CBBBC62D3C63327A46752CF4814AC26F570C288D8BD5C84E81980829C5",
                            Salt = new byte[] { 76, 5, 17, 90, 199, 137, 38, 137, 234, 58, 250, 150, 233, 156, 125, 74, 37, 245, 67, 134, 161, 221, 149, 219, 74, 22, 188, 10, 87, 255, 185, 53, 238, 51, 199, 168, 222, 137, 42, 227, 32, 183, 149, 232, 224, 54, 78, 117, 29, 255, 92, 21, 232, 12, 168, 42, 55, 249, 129, 86, 43, 17, 190, 145 },
                            Username = "lipek"
                        },
                        new
                        {
                            Id = 5,
                            Email = "testminipackage@gmail.com",
                            FirstName = "Test",
                            LastName = "Test",
                            Newsletter = false,
                            Password = "FE0C50578A3ED7845FC32590E044D98DE0B7EB94BE70AF0E30523D0E0D7CE6E301BEE979DA056973B7F3812224DC185CF751C21329591E8EA8B455897D6C0A58",
                            Salt = new byte[] { 171, 234, 210, 203, 56, 141, 249, 74, 247, 61, 242, 175, 125, 121, 181, 45, 252, 187, 202, 53, 217, 234, 181, 173, 154, 37, 33, 169, 94, 52, 126, 30, 117, 32, 241, 41, 227, 13, 190, 14, 36, 125, 148, 252, 194, 86, 5, 29, 255, 98, 79, 128, 244, 54, 228, 106, 151, 168, 221, 7, 165, 142, 99, 202 },
                            Username = "test"
                        });
                });

            modelBuilder.Entity("mini_package_api.Models.ClientAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("address_id");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit")
                        .HasColumnName("is_default");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientAddresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            ClientId = 2,
                            IsDefault = true
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            ClientId = 2,
                            IsDefault = false
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 3,
                            ClientId = 2,
                            IsDefault = false
                        },
                        new
                        {
                            Id = 4,
                            AddressId = 4,
                            ClientId = 3,
                            IsDefault = true
                        },
                        new
                        {
                            Id = 5,
                            AddressId = 5,
                            ClientId = 3,
                            IsDefault = false
                        },
                        new
                        {
                            Id = 6,
                            AddressId = 6,
                            ClientId = 3,
                            IsDefault = false
                        },
                        new
                        {
                            Id = 7,
                            AddressId = 7,
                            ClientId = 5,
                            IsDefault = true
                        },
                        new
                        {
                            Id = 8,
                            AddressId = 8,
                            ClientId = 5,
                            IsDefault = false
                        },
                        new
                        {
                            Id = 9,
                            AddressId = 9,
                            ClientId = 5,
                            IsDefault = false
                        });
                });

            modelBuilder.Entity("mini_package_api.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("country_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("country_code");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("country_name");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            CountryCode = "PL",
                            CountryName = "Poland"
                        },
                        new
                        {
                            CountryId = 2,
                            CountryCode = "FR",
                            CountryName = "France"
                        },
                        new
                        {
                            CountryId = 3,
                            CountryCode = "DE",
                            CountryName = "Germany"
                        },
                        new
                        {
                            CountryId = 4,
                            CountryCode = "ES",
                            CountryName = "Spain"
                        });
                });

            modelBuilder.Entity("mini_package_api.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("role");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("salt");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "janow@gmail.com",
                            FirstName = "Jan",
                            LastName = "Nowak",
                            Password = "2E8AFB7565526122F37FA8260DB79F8B5CE83CAAB3F5F335CCD5F2AE651007800667E72B6FBC7CA8C2CDCB1D0E0A35A09015E92CE98397B2C77C1CF0A5D9C88E",
                            Role = "OfficeWorker",
                            Salt = new byte[] { 4, 221, 9, 104, 25, 201, 225, 183, 12, 224, 102, 153, 226, 10, 83, 114, 145, 141, 226, 69, 193, 136, 4, 146, 183, 215, 22, 130, 104, 230, 24, 38, 91, 2, 173, 32, 129, 217, 109, 232, 172, 36, 109, 126, 177, 196, 234, 104, 245, 82, 166, 38, 28, 196, 86, 226, 248, 43, 227, 200, 146, 131, 227, 237 },
                            Username = "janow"
                        },
                        new
                        {
                            Id = 2,
                            Email = "frwys@gmail.com",
                            FirstName = "Franek",
                            LastName = "Wyszomierski",
                            Password = "35AD2B4143C631FE057BE93FD6313BAF2C3F52268BEC410B25C0E9C5231775C2A2256357A28427D9FC16DA3597967A2A8BB14D9FDED65C56ECF0763CA8F7EAD8",
                            Role = "Courier",
                            Salt = new byte[] { 151, 57, 228, 209, 58, 175, 194, 195, 110, 81, 215, 255, 179, 151, 99, 86, 138, 62, 17, 29, 195, 188, 77, 120, 170, 7, 214, 196, 4, 212, 192, 220, 16, 15, 153, 26, 94, 220, 39, 117, 63, 251, 220, 92, 99, 246, 80, 16, 234, 158, 197, 189, 137, 199, 220, 230, 50, 17, 44, 171, 116, 113, 21, 112 },
                            Username = "frwys"
                        },
                        new
                        {
                            Id = 3,
                            Email = "igzal@gmail.com",
                            FirstName = "Ignacy",
                            LastName = "Zalewski",
                            Password = "2AFBE0B921453ADD7B89C509432795B5AA2E83FE9081D9D5BB5F5398BFAE2285FFE16D274306253F94EA9AA129B72449DF2E54AFC851AE3E5D44E804C1E8907E",
                            Role = "Courier",
                            Salt = new byte[] { 206, 16, 79, 50, 143, 104, 226, 207, 79, 151, 189, 176, 239, 169, 141, 49, 67, 230, 217, 12, 0, 185, 176, 146, 62, 64, 244, 232, 184, 123, 188, 231, 41, 182, 18, 37, 194, 79, 254, 0, 66, 48, 36, 95, 196, 180, 146, 199, 39, 152, 246, 62, 168, 185, 140, 139, 219, 117, 170, 6, 157, 253, 45, 186 },
                            Username = "igzal"
                        });
                });

            modelBuilder.Entity("mini_package_api.Models.Inquire", b =>
                {
                    b.Property<int>("InquireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("inquire_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InquireId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<bool>("DeliveryAtWeekend")
                        .HasColumnType("bit")
                        .HasColumnName("delivery_at_weekend");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("delivery_date");

                    b.Property<int>("DestinationClientAddressId")
                        .HasColumnType("int")
                        .HasColumnName("destination_client_address_id");

                    b.Property<decimal>("DisplayPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("display_price");

                    b.Property<Guid>("InquireGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("inqure_guid");

                    b.Property<bool>("IsIncoming")
                        .HasColumnType("bit")
                        .HasColumnName("is_incoming");

                    b.Property<decimal>("PackageSizeHeight")
                        .HasColumnType("decimal(6,2)")
                        .HasColumnName("package_size_height");

                    b.Property<decimal>("PackageSizeLength")
                        .HasColumnType("decimal(6,2)")
                        .HasColumnName("package_size_length");

                    b.Property<decimal>("PackageSizeWidth")
                        .HasColumnType("decimal(6,2)")
                        .HasColumnName("package_size_width");

                    b.Property<DateTime>("PickupDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("pickup_date");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("priority");

                    b.Property<int>("SourceClientAddressId")
                        .HasColumnType("int")
                        .HasColumnName("source_client_address_id");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(6,3)")
                        .HasColumnName("weight");

                    b.HasKey("InquireId");

                    b.HasIndex("DestinationClientAddressId");

                    b.HasIndex("SourceClientAddressId");

                    b.ToTable("Inquires");

                    b.HasData(
                        new
                        {
                            InquireId = 1,
                            CreatedDate = new DateTime(2023, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 1,
                            DisplayPrice = 250m,
                            InquireGuid = new Guid("7c6d1c48-2f41-4df2-8165-4c3e13c3c20b"),
                            IsIncoming = false,
                            PackageSizeHeight = 7.75m,
                            PackageSizeLength = 3m,
                            PackageSizeWidth = 10.5m,
                            PickupDate = new DateTime(2023, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 2,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 2,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = true,
                            DeliveryDate = new DateTime(2023, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 1,
                            DisplayPrice = 150m,
                            InquireGuid = new Guid("0f13dceb-bd36-4f3a-8752-1e5fe72e5d9f"),
                            IsIncoming = false,
                            PackageSizeHeight = 5.25m,
                            PackageSizeLength = 2m,
                            PackageSizeWidth = 2.5m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "High",
                            SourceClientAddressId = 3,
                            Weight = 2m
                        },
                        new
                        {
                            InquireId = 3,
                            CreatedDate = new DateTime(2023, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 4,
                            DisplayPrice = 510m,
                            InquireGuid = new Guid("dce66f68-d07b-420e-a75a-7a67af189c15"),
                            IsIncoming = false,
                            PackageSizeHeight = 6.30m,
                            PackageSizeLength = 3.6m,
                            PackageSizeWidth = 12.35m,
                            PickupDate = new DateTime(2023, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 5,
                            Weight = 0.75m
                        },
                        new
                        {
                            InquireId = 4,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = true,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 4,
                            DisplayPrice = 123m,
                            InquireGuid = new Guid("c1980f39-9f0a-40e4-8e4d-3bf2416957b7"),
                            IsIncoming = false,
                            PackageSizeHeight = 4m,
                            PackageSizeLength = 1.5m,
                            PackageSizeWidth = 3m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "High",
                            SourceClientAddressId = 6,
                            Weight = 12m
                        },
                        new
                        {
                            InquireId = 5,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = true,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 322m,
                            InquireGuid = new Guid("c7f1b0e4-b9d1-49f4-8cc0-c8ed458ec4b9"),
                            IsIncoming = false,
                            PackageSizeHeight = 2m,
                            PackageSizeLength = 1.5m,
                            PackageSizeWidth = 13m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "High",
                            SourceClientAddressId = 8,
                            Weight = 22m
                        },
                        new
                        {
                            InquireId = 6,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 550m,
                            InquireGuid = new Guid("7c03436c-82bf-4b4b-bf03-3a60e3d8e8f9"),
                            IsIncoming = false,
                            PackageSizeHeight = 4m,
                            PackageSizeLength = 4.75m,
                            PackageSizeWidth = 5m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 9,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 7,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = true,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 8,
                            DisplayPrice = 610m,
                            InquireGuid = new Guid("312888d1-2e1f-4ea1-9dbb-ee42f94ed8b5"),
                            IsIncoming = false,
                            PackageSizeHeight = 3.5m,
                            PackageSizeLength = 3m,
                            PackageSizeWidth = 6.5m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 9,
                            Weight = 10m
                        },
                        new
                        {
                            InquireId = 8,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 9,
                            DisplayPrice = 997m,
                            InquireGuid = new Guid("12cf5d36-e146-4e61-badf-d40f8e9e4f6d"),
                            IsIncoming = false,
                            PackageSizeHeight = 12m,
                            PackageSizeLength = 2.5m,
                            PackageSizeWidth = 1.25m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "High",
                            SourceClientAddressId = 8,
                            Weight = 13m
                        },
                        new
                        {
                            InquireId = 9,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 308m,
                            InquireGuid = new Guid("8a3ef693-dbc1-4efb-a7c1-9722d6b09e0a"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 10,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 309m,
                            InquireGuid = new Guid("ed3e30ec-bb44-4679-b007-70bf7b33177c"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 11,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 310m,
                            InquireGuid = new Guid("779cc5e5-c3c4-4d0a-b349-3a1f27e5fb65"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 12,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 311m,
                            InquireGuid = new Guid("fe1e0c4c-431c-4c8c-aa7c-3e6e31a62d8a"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 13,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 312m,
                            InquireGuid = new Guid("93a03c65-c6b8-480b-a397-58bc1864295c"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 14,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 313m,
                            InquireGuid = new Guid("c595b06d-9997-4c6a-b0d5-4d43f78913e3"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 15,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 314m,
                            InquireGuid = new Guid("bc77e81f-1fe9-4a8a-9149-11531c7cc9c6"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 16,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 315m,
                            InquireGuid = new Guid("c1361091-ba2a-42fc-a34f-0a57912b20d3"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 17,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 316m,
                            InquireGuid = new Guid("e74a6a5c-f631-416b-9a1c-25eb856c9eae"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 18,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 317m,
                            InquireGuid = new Guid("8894a5fc-b2bf-4cf2-a292-144692c1190a"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 19,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 318m,
                            InquireGuid = new Guid("d3c583b8-efcb-4b38-bc0f-2e66ff489c77"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 20,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 319m,
                            InquireGuid = new Guid("be923f96-3c9d-4ae5-90a2-6ddbe94c2dc4"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 21,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 320m,
                            InquireGuid = new Guid("af1f3ff5-9e2e-4ed4-bc09-e510c280194b"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 22,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 321m,
                            InquireGuid = new Guid("f1f72911-83e7-4a3d-a3b1-cbc515af682f"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 23,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 322m,
                            InquireGuid = new Guid("fc051f0c-400f-40ef-8cb6-9923d9960f98"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 24,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 323m,
                            InquireGuid = new Guid("0db947eb-c6eb-4273-b783-47eac68a164d"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 25,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 324m,
                            InquireGuid = new Guid("bc3e7ae3-04b9-4e47-bb0b-541c4df36d3e"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 26,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 325m,
                            InquireGuid = new Guid("0c67dcb3-2f67-4b19-bfe2-015081c1c94a"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 27,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 326m,
                            InquireGuid = new Guid("3da3c8ec-2c99-40e3-9a0c-2e4052a849c5"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 28,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 327m,
                            InquireGuid = new Guid("89a9d2f0-fa68-4c4e-84b8-e4e02d8e6473"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 29,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 7,
                            DisplayPrice = 328m,
                            InquireGuid = new Guid("985f39db-86e2-437d-b50e-e8616b6bf21b"),
                            IsIncoming = false,
                            PackageSizeHeight = 1m,
                            PackageSizeLength = 1m,
                            PackageSizeWidth = 1m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 8,
                            Weight = 1m
                        });
                });

            modelBuilder.Entity("mini_package_api.Models.Offer", b =>
                {
                    b.Property<int>("OfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("offer_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfferId"));

                    b.Property<int>("CourierId")
                        .HasColumnType("int")
                        .HasColumnName("courier_id");

                    b.Property<int>("InquireId")
                        .HasColumnType("int")
                        .HasColumnName("inquire_id");

                    b.Property<string>("OfferStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("offer_status");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("team_name");

                    b.HasKey("OfferId");

                    b.HasIndex("CourierId");

                    b.HasIndex("InquireId")
                        .IsUnique();

                    b.ToTable("Offers");

                    b.HasData(
                        new
                        {
                            OfferId = 1,
                            CourierId = 2,
                            InquireId = 1,
                            OfferStatus = "AtWarehouse",
                            Price = 100m,
                            TeamName = "MiNIPackage"
                        },
                        new
                        {
                            OfferId = 2,
                            CourierId = 3,
                            InquireId = 4,
                            OfferStatus = "OfferStatusEnum",
                            Price = 70.23m,
                            TeamName = "MiNIPackage"
                        },
                        new
                        {
                            OfferId = 3,
                            CourierId = 2,
                            InquireId = 5,
                            OfferStatus = "AtWarehouse",
                            Price = 125m,
                            TeamName = "MiNIPackage"
                        },
                        new
                        {
                            OfferId = 4,
                            CourierId = 3,
                            InquireId = 8,
                            OfferStatus = "Declined",
                            Price = 52.5m,
                            TeamName = "MiNIPackage"
                        });
                });

            modelBuilder.Entity("mini_package_api.Models.Address", b =>
                {
                    b.HasOne("mini_package_api.Models.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("mini_package_api.Models.ClientAddress", b =>
                {
                    b.HasOne("mini_package_api.Models.Address", "Address")
                        .WithMany("ClientAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mini_package_api.Models.Client", "Client")
                        .WithMany("ClientAddresses")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("mini_package_api.Models.Inquire", b =>
                {
                    b.HasOne("mini_package_api.Models.ClientAddress", "DestinationClientAddress")
                        .WithMany("DestinationInquires")
                        .HasForeignKey("DestinationClientAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("mini_package_api.Models.ClientAddress", "SourceClientAddress")
                        .WithMany("SourceInquires")
                        .HasForeignKey("SourceClientAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DestinationClientAddress");

                    b.Navigation("SourceClientAddress");
                });

            modelBuilder.Entity("mini_package_api.Models.Offer", b =>
                {
                    b.HasOne("mini_package_api.Models.Employee", "Courier")
                        .WithMany("Offers")
                        .HasForeignKey("CourierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mini_package_api.Models.Inquire", "Inquire")
                        .WithOne("Offer")
                        .HasForeignKey("mini_package_api.Models.Offer", "InquireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courier");

                    b.Navigation("Inquire");
                });

            modelBuilder.Entity("mini_package_api.Models.Address", b =>
                {
                    b.Navigation("ClientAddresses");
                });

            modelBuilder.Entity("mini_package_api.Models.Client", b =>
                {
                    b.Navigation("ClientAddresses");
                });

            modelBuilder.Entity("mini_package_api.Models.ClientAddress", b =>
                {
                    b.Navigation("DestinationInquires");

                    b.Navigation("SourceInquires");
                });

            modelBuilder.Entity("mini_package_api.Models.Country", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("mini_package_api.Models.Employee", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("mini_package_api.Models.Inquire", b =>
                {
                    b.Navigation("Offer")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
