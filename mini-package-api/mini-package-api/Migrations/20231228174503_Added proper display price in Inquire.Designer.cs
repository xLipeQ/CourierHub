// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using mini_package_api.DbContexts;

#nullable disable

namespace mini_package_api.Migrations
{
    [DbContext(typeof(MiniPackageDbContext))]
    [Migration("20231228174503_Added proper display price in Inquire")]
    partial class AddedproperdisplaypriceinInquire
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("mini_package_api.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("address_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("city");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("country_id");

                    b.Property<int?>("FlatNumber")
                        .HasColumnType("int")
                        .HasColumnName("flat_number");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("street");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("street_number");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("zip_code");

                    b.HasKey("AddressId");

                    b.HasIndex("CountryId");

                    b.ToTable("Addresss");

                    b.HasData(
                        new
                        {
                            AddressId = 1,
                            City = "Warsaw",
                            CountryId = 1,
                            FlatNumber = 10,
                            Street = "Nowowiejska",
                            StreetNumber = "17",
                            ZipCode = "12-345"
                        },
                        new
                        {
                            AddressId = 2,
                            City = "Krakow",
                            CountryId = 1,
                            Street = "Kwiatkowa",
                            StreetNumber = "5a",
                            ZipCode = "543-21"
                        },
                        new
                        {
                            AddressId = 3,
                            City = "Paris",
                            CountryId = 2,
                            FlatNumber = 3,
                            Street = "France street 1",
                            StreetNumber = "2",
                            ZipCode = "52006"
                        },
                        new
                        {
                            AddressId = 4,
                            City = "Lyon",
                            CountryId = 2,
                            Street = "France street 2",
                            StreetNumber = "5a",
                            ZipCode = "78264"
                        },
                        new
                        {
                            AddressId = 5,
                            City = "Berlin",
                            CountryId = 3,
                            FlatNumber = 3,
                            Street = "Germany street 1",
                            StreetNumber = "2",
                            ZipCode = "10117"
                        },
                        new
                        {
                            AddressId = 6,
                            City = "Madrid",
                            CountryId = 4,
                            Street = "Spain street 1",
                            StreetNumber = "3",
                            ZipCode = "28012"
                        });
                });

            modelBuilder.Entity("mini_package_api.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_name");

                    b.Property<bool>("Newsletter")
                        .HasColumnType("bit")
                        .HasColumnName("newsletter");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("salt");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "",
                            FirstName = "",
                            LastName = "",
                            Newsletter = false,
                            Password = "",
                            Salt = new byte[0],
                            Username = "guest"
                        },
                        new
                        {
                            Id = 2,
                            Email = "mikwa@gmail.com",
                            FirstName = "Michal",
                            LastName = "Kwiatek",
                            Newsletter = false,
                            Password = "C5D6A2914665CAA12DE287C820E0B9A29B72D9385809CB11F891C7031EF8F158874B7AA408A0A29E05BCE0B85AEEA42DD142A0B1F5D824DFFA406B3997925D0D",
                            Salt = new byte[] { 116, 33, 42, 25, 213, 163, 53, 22, 196, 119, 116, 208, 205, 177, 2, 39, 32, 164, 30, 199, 19, 123, 115, 166, 238, 101, 196, 155, 29, 221, 81, 244, 86, 187, 240, 131, 189, 117, 249, 123, 187, 141, 84, 201, 170, 27, 246, 160, 205, 114, 16, 118, 55, 200, 167, 101, 102, 121, 94, 72, 161, 22, 187, 132 },
                            Username = "mikwa"
                        },
                        new
                        {
                            Id = 3,
                            Email = "kakow@gmail.com",
                            FirstName = "Kacper",
                            LastName = "Kowalski",
                            Newsletter = false,
                            Password = "E97FB354F828879F82448EC7C9CC833569DDD80BB2F91F19D3741A339FB6616F30EE952D64E445400924F87D7699B64A97F01BAA9DAEACB5F6F95617B4E468A2",
                            Salt = new byte[] { 207, 161, 51, 68, 123, 192, 86, 107, 198, 243, 8, 199, 233, 95, 37, 90, 238, 252, 73, 141, 9, 92, 109, 22, 153, 38, 211, 252, 231, 12, 155, 59, 178, 227, 0, 245, 48, 238, 176, 21, 67, 202, 87, 29, 165, 57, 84, 221, 29, 237, 18, 148, 136, 212, 178, 124, 64, 62, 183, 30, 125, 123, 167, 16 },
                            Username = "kakow"
                        },
                        new
                        {
                            Id = 4,
                            Email = "mateuszlipek@gmail.com",
                            FirstName = "Mateusz",
                            LastName = "Lipek",
                            Newsletter = false,
                            Password = "1E1C378CC651DF5CB4AA2DEEC977C20F080062027568E38054499450A5707693EB45827F60C330DDD82070B3312EC08E223A18C86D23EB62A94BAF65C8588035",
                            Salt = new byte[] { 254, 247, 234, 18, 193, 8, 224, 159, 168, 13, 100, 3, 197, 208, 221, 108, 216, 134, 27, 122, 89, 25, 41, 198, 14, 58, 31, 12, 112, 193, 57, 11, 216, 156, 181, 97, 37, 218, 60, 182, 206, 192, 54, 30, 132, 198, 101, 176, 180, 84, 152, 224, 241, 99, 227, 29, 185, 153, 86, 58, 21, 232, 132, 3 },
                            Username = "lipek"
                        },
                        new
                        {
                            Id = 7,
                            Email = "testminipackage@gmail.com",
                            FirstName = "Mini",
                            LastName = "Package",
                            Newsletter = true,
                            Password = "017CBB1061E601093BBF9546EF92E4B2111C59D2D010C59C75B0B25854DAF2F1ABE4CB87E983E0C5DB7E9BD562DB78EF653BBA696643869823E550E3BCFE993E",
                            Salt = new byte[] { 76, 3, 132, 75, 160, 136, 243, 245, 168, 223, 73, 126, 146, 45, 49, 4, 195, 159, 152, 233, 223, 61, 66, 213, 60, 124, 58, 185, 167, 87, 163, 197, 106, 190, 234, 16, 11, 71, 227, 63, 62, 61, 65, 6, 89, 102, 19, 146, 68, 194, 196, 60, 30, 33, 199, 34, 7, 193, 148, 69, 76, 164, 167, 193 },
                            Username = "testminipackage"
                        });
                });

            modelBuilder.Entity("mini_package_api.Models.ClientAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("address_id");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit")
                        .HasColumnName("is_default");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientAddresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            ClientId = 2,
                            IsDefault = true
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            ClientId = 2,
                            IsDefault = false
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 3,
                            ClientId = 2,
                            IsDefault = false
                        },
                        new
                        {
                            Id = 4,
                            AddressId = 4,
                            ClientId = 3,
                            IsDefault = true
                        },
                        new
                        {
                            Id = 5,
                            AddressId = 5,
                            ClientId = 3,
                            IsDefault = false
                        },
                        new
                        {
                            Id = 6,
                            AddressId = 6,
                            ClientId = 3,
                            IsDefault = false
                        });
                });

            modelBuilder.Entity("mini_package_api.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("country_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("country_code");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("country_name");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            CountryCode = "PL",
                            CountryName = "Poland"
                        },
                        new
                        {
                            CountryId = 2,
                            CountryCode = "FR",
                            CountryName = "France"
                        },
                        new
                        {
                            CountryId = 3,
                            CountryCode = "DE",
                            CountryName = "Germany"
                        },
                        new
                        {
                            CountryId = 4,
                            CountryCode = "ES",
                            CountryName = "Spain"
                        });
                });

            modelBuilder.Entity("mini_package_api.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("role");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("salt");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "janow@gmail.com",
                            FirstName = "Jan",
                            LastName = "Nowak",
                            Password = "82224089001B4443306891D759C9BE26BA45889483A95B098323FF020CB2D898204F43A20CE3729C88272941576ABDC4BBBDF9FA687356B11AE2E2B2B28DADC5",
                            Role = "OfficeWorker",
                            Salt = new byte[] { 92, 87, 30, 92, 161, 186, 60, 83, 129, 41, 143, 207, 124, 197, 176, 13, 87, 57, 109, 33, 18, 64, 100, 200, 71, 244, 185, 45, 169, 143, 136, 32, 243, 150, 137, 204, 67, 122, 83, 152, 154, 132, 14, 39, 172, 248, 29, 128, 103, 62, 38, 233, 58, 103, 191, 194, 14, 13, 91, 200, 168, 146, 139, 146 },
                            Username = "janow"
                        },
                        new
                        {
                            Id = 2,
                            Email = "frwys@gmail.com",
                            FirstName = "Franek",
                            LastName = "Wyszomierski",
                            Password = "D5C63BB56920ED8348D347FBF9E6EC40720181C1EE99A623A2AA1FB9D78D5B029F9D5128F356BFA93106EC7026012BF42A3A001C91D5AB9C2569C091158AD4F4",
                            Role = "Courier",
                            Salt = new byte[] { 34, 105, 195, 99, 193, 178, 185, 21, 49, 195, 212, 88, 177, 211, 119, 88, 163, 58, 129, 152, 225, 181, 35, 112, 113, 91, 45, 159, 137, 5, 142, 5, 189, 154, 165, 254, 201, 209, 130, 180, 139, 93, 116, 103, 78, 145, 139, 12, 111, 175, 164, 7, 194, 0, 62, 208, 230, 160, 49, 162, 74, 102, 203, 53 },
                            Username = "frwys"
                        },
                        new
                        {
                            Id = 3,
                            Email = "igzal@gmail.com",
                            FirstName = "Ignacy",
                            LastName = "Zalewski",
                            Password = "3ED80A9E2738E3DBE92D50C66D26CC49150095D45C3CD729BA0E2A21853F89B31D89BBA26AEC2F9176B3A71F8EAC4D6F849B1FBB8226E21C61E9189199051F7F",
                            Role = "Courier",
                            Salt = new byte[] { 199, 201, 48, 142, 196, 84, 236, 158, 112, 84, 111, 243, 231, 212, 15, 201, 222, 164, 46, 179, 16, 17, 7, 222, 230, 44, 78, 40, 172, 228, 28, 1, 196, 231, 103, 43, 234, 25, 71, 135, 75, 148, 60, 255, 98, 235, 201, 199, 205, 197, 115, 13, 168, 100, 98, 218, 15, 160, 17, 22, 64, 190, 179, 107 },
                            Username = "igzal"
                        });
                });

            modelBuilder.Entity("mini_package_api.Models.Inquire", b =>
                {
                    b.Property<int>("InquireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("inquire_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InquireId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<bool>("DeliveryAtWeekend")
                        .HasColumnType("bit")
                        .HasColumnName("delivery_at_weekend");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("delivery_date");

                    b.Property<int>("DestinationClientAddressId")
                        .HasColumnType("int")
                        .HasColumnName("destination_client_address_id");

                    b.Property<decimal>("DisplayPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("display_price");

                    b.Property<bool>("IsIncoming")
                        .HasColumnType("bit")
                        .HasColumnName("is_incoming");

                    b.Property<decimal>("PackageSizeHeight")
                        .HasColumnType("decimal(6,2)")
                        .HasColumnName("package_size_height");

                    b.Property<decimal>("PackageSizeLength")
                        .HasColumnType("decimal(6,2)")
                        .HasColumnName("package_size_length");

                    b.Property<decimal>("PackageSizeWidth")
                        .HasColumnType("decimal(6,2)")
                        .HasColumnName("package_size_width");

                    b.Property<DateTime>("PickupDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("pickup_date");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("priority");

                    b.Property<int>("SourceClientAddressId")
                        .HasColumnType("int")
                        .HasColumnName("source_client_address_id");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(6,3)")
                        .HasColumnName("weight");

                    b.HasKey("InquireId");

                    b.HasIndex("DestinationClientAddressId");

                    b.HasIndex("SourceClientAddressId");

                    b.ToTable("Inquires");

                    b.HasData(
                        new
                        {
                            InquireId = 1,
                            CreatedDate = new DateTime(2023, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 1,
                            DisplayPrice = 0m,
                            IsIncoming = false,
                            PackageSizeHeight = 7.75m,
                            PackageSizeLength = 3m,
                            PackageSizeWidth = 10.5m,
                            PickupDate = new DateTime(2023, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 2,
                            Weight = 1m
                        },
                        new
                        {
                            InquireId = 2,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = true,
                            DeliveryDate = new DateTime(2023, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 1,
                            DisplayPrice = 0m,
                            IsIncoming = false,
                            PackageSizeHeight = 5.25m,
                            PackageSizeLength = 2m,
                            PackageSizeWidth = 2.5m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "High",
                            SourceClientAddressId = 3,
                            Weight = 2m
                        },
                        new
                        {
                            InquireId = 3,
                            CreatedDate = new DateTime(2023, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = false,
                            DeliveryDate = new DateTime(2023, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 4,
                            DisplayPrice = 0m,
                            IsIncoming = false,
                            PackageSizeHeight = 6.30m,
                            PackageSizeLength = 3.6m,
                            PackageSizeWidth = 12.35m,
                            PickupDate = new DateTime(2023, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "Low",
                            SourceClientAddressId = 5,
                            Weight = 0.75m
                        },
                        new
                        {
                            InquireId = 4,
                            CreatedDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAtWeekend = true,
                            DeliveryDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationClientAddressId = 4,
                            DisplayPrice = 0m,
                            IsIncoming = false,
                            PackageSizeHeight = 4m,
                            PackageSizeLength = 1.5m,
                            PackageSizeWidth = 3m,
                            PickupDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = "High",
                            SourceClientAddressId = 6,
                            Weight = 12m
                        });
                });

            modelBuilder.Entity("mini_package_api.Models.Offer", b =>
                {
                    b.Property<int>("OfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("offer_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfferId"));

                    b.Property<int>("CourierId")
                        .HasColumnType("int")
                        .HasColumnName("courier_id");

                    b.Property<int>("InquireId")
                        .HasColumnType("int")
                        .HasColumnName("inquire_id");

                    b.Property<string>("OfferStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("offer_status");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("team_name");

                    b.HasKey("OfferId");

                    b.HasIndex("CourierId");

                    b.HasIndex("InquireId")
                        .IsUnique();

                    b.ToTable("Offers");

                    b.HasData(
                        new
                        {
                            OfferId = 1,
                            CourierId = 2,
                            InquireId = 1,
                            OfferStatus = "AtWarehouse",
                            Price = 100m,
                            TeamName = "MiNIPackage"
                        },
                        new
                        {
                            OfferId = 2,
                            CourierId = 3,
                            InquireId = 4,
                            OfferStatus = "OfferStatusEnum",
                            Price = 70.23m,
                            TeamName = "MiNIPackage"
                        });
                });

            modelBuilder.Entity("mini_package_api.Models.Address", b =>
                {
                    b.HasOne("mini_package_api.Models.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("mini_package_api.Models.ClientAddress", b =>
                {
                    b.HasOne("mini_package_api.Models.Address", "Address")
                        .WithMany("ClientAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mini_package_api.Models.Client", "Client")
                        .WithMany("ClientAddresses")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("mini_package_api.Models.Inquire", b =>
                {
                    b.HasOne("mini_package_api.Models.ClientAddress", "DestinationClientAddress")
                        .WithMany("DestinationInquires")
                        .HasForeignKey("DestinationClientAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("mini_package_api.Models.ClientAddress", "SourceClientAddress")
                        .WithMany("SourceInquires")
                        .HasForeignKey("SourceClientAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DestinationClientAddress");

                    b.Navigation("SourceClientAddress");
                });

            modelBuilder.Entity("mini_package_api.Models.Offer", b =>
                {
                    b.HasOne("mini_package_api.Models.Employee", "Courier")
                        .WithMany("Offers")
                        .HasForeignKey("CourierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mini_package_api.Models.Inquire", "Inquire")
                        .WithOne("Offer")
                        .HasForeignKey("mini_package_api.Models.Offer", "InquireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courier");

                    b.Navigation("Inquire");
                });

            modelBuilder.Entity("mini_package_api.Models.Address", b =>
                {
                    b.Navigation("ClientAddresses");
                });

            modelBuilder.Entity("mini_package_api.Models.Client", b =>
                {
                    b.Navigation("ClientAddresses");
                });

            modelBuilder.Entity("mini_package_api.Models.ClientAddress", b =>
                {
                    b.Navigation("DestinationInquires");

                    b.Navigation("SourceInquires");
                });

            modelBuilder.Entity("mini_package_api.Models.Country", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("mini_package_api.Models.Employee", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("mini_package_api.Models.Inquire", b =>
                {
                    b.Navigation("Offer")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
